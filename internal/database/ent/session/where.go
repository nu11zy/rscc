// Code generated by ent, DO NOT EDIT.

package session

import (
	"rscc/internal/database/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Session {
	return predicate.Session(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Session {
	return predicate.Session(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldCreatedAt, v))
}

// AgentID applies equality check predicate on the "agent_id" field. It's identical to AgentIDEQ.
func AgentID(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldAgentID, v))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldUsername, v))
}

// Hostname applies equality check predicate on the "hostname" field. It's identical to HostnameEQ.
func Hostname(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldHostname, v))
}

// Domain applies equality check predicate on the "domain" field. It's identical to DomainEQ.
func Domain(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldDomain, v))
}

// IsPriv applies equality check predicate on the "is_priv" field. It's identical to IsPrivEQ.
func IsPriv(v bool) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldIsPriv, v))
}

// OsMeta applies equality check predicate on the "os_meta" field. It's identical to OsMetaEQ.
func OsMeta(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldOsMeta, v))
}

// ProcName applies equality check predicate on the "proc_name" field. It's identical to ProcNameEQ.
func ProcName(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldProcName, v))
}

// Extra applies equality check predicate on the "extra" field. It's identical to ExtraEQ.
func Extra(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldExtra, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldCreatedAt, v))
}

// AgentIDEQ applies the EQ predicate on the "agent_id" field.
func AgentIDEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldAgentID, v))
}

// AgentIDNEQ applies the NEQ predicate on the "agent_id" field.
func AgentIDNEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldAgentID, v))
}

// AgentIDIn applies the In predicate on the "agent_id" field.
func AgentIDIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldAgentID, vs...))
}

// AgentIDNotIn applies the NotIn predicate on the "agent_id" field.
func AgentIDNotIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldAgentID, vs...))
}

// AgentIDGT applies the GT predicate on the "agent_id" field.
func AgentIDGT(v string) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldAgentID, v))
}

// AgentIDGTE applies the GTE predicate on the "agent_id" field.
func AgentIDGTE(v string) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldAgentID, v))
}

// AgentIDLT applies the LT predicate on the "agent_id" field.
func AgentIDLT(v string) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldAgentID, v))
}

// AgentIDLTE applies the LTE predicate on the "agent_id" field.
func AgentIDLTE(v string) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldAgentID, v))
}

// AgentIDContains applies the Contains predicate on the "agent_id" field.
func AgentIDContains(v string) predicate.Session {
	return predicate.Session(sql.FieldContains(FieldAgentID, v))
}

// AgentIDHasPrefix applies the HasPrefix predicate on the "agent_id" field.
func AgentIDHasPrefix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasPrefix(FieldAgentID, v))
}

// AgentIDHasSuffix applies the HasSuffix predicate on the "agent_id" field.
func AgentIDHasSuffix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasSuffix(FieldAgentID, v))
}

// AgentIDEqualFold applies the EqualFold predicate on the "agent_id" field.
func AgentIDEqualFold(v string) predicate.Session {
	return predicate.Session(sql.FieldEqualFold(FieldAgentID, v))
}

// AgentIDContainsFold applies the ContainsFold predicate on the "agent_id" field.
func AgentIDContainsFold(v string) predicate.Session {
	return predicate.Session(sql.FieldContainsFold(FieldAgentID, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.Session {
	return predicate.Session(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.Session {
	return predicate.Session(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.Session {
	return predicate.Session(sql.FieldContainsFold(FieldUsername, v))
}

// HostnameEQ applies the EQ predicate on the "hostname" field.
func HostnameEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldHostname, v))
}

// HostnameNEQ applies the NEQ predicate on the "hostname" field.
func HostnameNEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldHostname, v))
}

// HostnameIn applies the In predicate on the "hostname" field.
func HostnameIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldHostname, vs...))
}

// HostnameNotIn applies the NotIn predicate on the "hostname" field.
func HostnameNotIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldHostname, vs...))
}

// HostnameGT applies the GT predicate on the "hostname" field.
func HostnameGT(v string) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldHostname, v))
}

// HostnameGTE applies the GTE predicate on the "hostname" field.
func HostnameGTE(v string) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldHostname, v))
}

// HostnameLT applies the LT predicate on the "hostname" field.
func HostnameLT(v string) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldHostname, v))
}

// HostnameLTE applies the LTE predicate on the "hostname" field.
func HostnameLTE(v string) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldHostname, v))
}

// HostnameContains applies the Contains predicate on the "hostname" field.
func HostnameContains(v string) predicate.Session {
	return predicate.Session(sql.FieldContains(FieldHostname, v))
}

// HostnameHasPrefix applies the HasPrefix predicate on the "hostname" field.
func HostnameHasPrefix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasPrefix(FieldHostname, v))
}

// HostnameHasSuffix applies the HasSuffix predicate on the "hostname" field.
func HostnameHasSuffix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasSuffix(FieldHostname, v))
}

// HostnameEqualFold applies the EqualFold predicate on the "hostname" field.
func HostnameEqualFold(v string) predicate.Session {
	return predicate.Session(sql.FieldEqualFold(FieldHostname, v))
}

// HostnameContainsFold applies the ContainsFold predicate on the "hostname" field.
func HostnameContainsFold(v string) predicate.Session {
	return predicate.Session(sql.FieldContainsFold(FieldHostname, v))
}

// DomainEQ applies the EQ predicate on the "domain" field.
func DomainEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldDomain, v))
}

// DomainNEQ applies the NEQ predicate on the "domain" field.
func DomainNEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldDomain, v))
}

// DomainIn applies the In predicate on the "domain" field.
func DomainIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldDomain, vs...))
}

// DomainNotIn applies the NotIn predicate on the "domain" field.
func DomainNotIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldDomain, vs...))
}

// DomainGT applies the GT predicate on the "domain" field.
func DomainGT(v string) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldDomain, v))
}

// DomainGTE applies the GTE predicate on the "domain" field.
func DomainGTE(v string) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldDomain, v))
}

// DomainLT applies the LT predicate on the "domain" field.
func DomainLT(v string) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldDomain, v))
}

// DomainLTE applies the LTE predicate on the "domain" field.
func DomainLTE(v string) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldDomain, v))
}

// DomainContains applies the Contains predicate on the "domain" field.
func DomainContains(v string) predicate.Session {
	return predicate.Session(sql.FieldContains(FieldDomain, v))
}

// DomainHasPrefix applies the HasPrefix predicate on the "domain" field.
func DomainHasPrefix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasPrefix(FieldDomain, v))
}

// DomainHasSuffix applies the HasSuffix predicate on the "domain" field.
func DomainHasSuffix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasSuffix(FieldDomain, v))
}

// DomainEqualFold applies the EqualFold predicate on the "domain" field.
func DomainEqualFold(v string) predicate.Session {
	return predicate.Session(sql.FieldEqualFold(FieldDomain, v))
}

// DomainContainsFold applies the ContainsFold predicate on the "domain" field.
func DomainContainsFold(v string) predicate.Session {
	return predicate.Session(sql.FieldContainsFold(FieldDomain, v))
}

// IsPrivEQ applies the EQ predicate on the "is_priv" field.
func IsPrivEQ(v bool) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldIsPriv, v))
}

// IsPrivNEQ applies the NEQ predicate on the "is_priv" field.
func IsPrivNEQ(v bool) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldIsPriv, v))
}

// OsMetaEQ applies the EQ predicate on the "os_meta" field.
func OsMetaEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldOsMeta, v))
}

// OsMetaNEQ applies the NEQ predicate on the "os_meta" field.
func OsMetaNEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldOsMeta, v))
}

// OsMetaIn applies the In predicate on the "os_meta" field.
func OsMetaIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldOsMeta, vs...))
}

// OsMetaNotIn applies the NotIn predicate on the "os_meta" field.
func OsMetaNotIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldOsMeta, vs...))
}

// OsMetaGT applies the GT predicate on the "os_meta" field.
func OsMetaGT(v string) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldOsMeta, v))
}

// OsMetaGTE applies the GTE predicate on the "os_meta" field.
func OsMetaGTE(v string) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldOsMeta, v))
}

// OsMetaLT applies the LT predicate on the "os_meta" field.
func OsMetaLT(v string) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldOsMeta, v))
}

// OsMetaLTE applies the LTE predicate on the "os_meta" field.
func OsMetaLTE(v string) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldOsMeta, v))
}

// OsMetaContains applies the Contains predicate on the "os_meta" field.
func OsMetaContains(v string) predicate.Session {
	return predicate.Session(sql.FieldContains(FieldOsMeta, v))
}

// OsMetaHasPrefix applies the HasPrefix predicate on the "os_meta" field.
func OsMetaHasPrefix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasPrefix(FieldOsMeta, v))
}

// OsMetaHasSuffix applies the HasSuffix predicate on the "os_meta" field.
func OsMetaHasSuffix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasSuffix(FieldOsMeta, v))
}

// OsMetaEqualFold applies the EqualFold predicate on the "os_meta" field.
func OsMetaEqualFold(v string) predicate.Session {
	return predicate.Session(sql.FieldEqualFold(FieldOsMeta, v))
}

// OsMetaContainsFold applies the ContainsFold predicate on the "os_meta" field.
func OsMetaContainsFold(v string) predicate.Session {
	return predicate.Session(sql.FieldContainsFold(FieldOsMeta, v))
}

// ProcNameEQ applies the EQ predicate on the "proc_name" field.
func ProcNameEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldProcName, v))
}

// ProcNameNEQ applies the NEQ predicate on the "proc_name" field.
func ProcNameNEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldProcName, v))
}

// ProcNameIn applies the In predicate on the "proc_name" field.
func ProcNameIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldProcName, vs...))
}

// ProcNameNotIn applies the NotIn predicate on the "proc_name" field.
func ProcNameNotIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldProcName, vs...))
}

// ProcNameGT applies the GT predicate on the "proc_name" field.
func ProcNameGT(v string) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldProcName, v))
}

// ProcNameGTE applies the GTE predicate on the "proc_name" field.
func ProcNameGTE(v string) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldProcName, v))
}

// ProcNameLT applies the LT predicate on the "proc_name" field.
func ProcNameLT(v string) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldProcName, v))
}

// ProcNameLTE applies the LTE predicate on the "proc_name" field.
func ProcNameLTE(v string) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldProcName, v))
}

// ProcNameContains applies the Contains predicate on the "proc_name" field.
func ProcNameContains(v string) predicate.Session {
	return predicate.Session(sql.FieldContains(FieldProcName, v))
}

// ProcNameHasPrefix applies the HasPrefix predicate on the "proc_name" field.
func ProcNameHasPrefix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasPrefix(FieldProcName, v))
}

// ProcNameHasSuffix applies the HasSuffix predicate on the "proc_name" field.
func ProcNameHasSuffix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasSuffix(FieldProcName, v))
}

// ProcNameEqualFold applies the EqualFold predicate on the "proc_name" field.
func ProcNameEqualFold(v string) predicate.Session {
	return predicate.Session(sql.FieldEqualFold(FieldProcName, v))
}

// ProcNameContainsFold applies the ContainsFold predicate on the "proc_name" field.
func ProcNameContainsFold(v string) predicate.Session {
	return predicate.Session(sql.FieldContainsFold(FieldProcName, v))
}

// ExtraEQ applies the EQ predicate on the "extra" field.
func ExtraEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldExtra, v))
}

// ExtraNEQ applies the NEQ predicate on the "extra" field.
func ExtraNEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldExtra, v))
}

// ExtraIn applies the In predicate on the "extra" field.
func ExtraIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldExtra, vs...))
}

// ExtraNotIn applies the NotIn predicate on the "extra" field.
func ExtraNotIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldExtra, vs...))
}

// ExtraGT applies the GT predicate on the "extra" field.
func ExtraGT(v string) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldExtra, v))
}

// ExtraGTE applies the GTE predicate on the "extra" field.
func ExtraGTE(v string) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldExtra, v))
}

// ExtraLT applies the LT predicate on the "extra" field.
func ExtraLT(v string) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldExtra, v))
}

// ExtraLTE applies the LTE predicate on the "extra" field.
func ExtraLTE(v string) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldExtra, v))
}

// ExtraContains applies the Contains predicate on the "extra" field.
func ExtraContains(v string) predicate.Session {
	return predicate.Session(sql.FieldContains(FieldExtra, v))
}

// ExtraHasPrefix applies the HasPrefix predicate on the "extra" field.
func ExtraHasPrefix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasPrefix(FieldExtra, v))
}

// ExtraHasSuffix applies the HasSuffix predicate on the "extra" field.
func ExtraHasSuffix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasSuffix(FieldExtra, v))
}

// ExtraEqualFold applies the EqualFold predicate on the "extra" field.
func ExtraEqualFold(v string) predicate.Session {
	return predicate.Session(sql.FieldEqualFold(FieldExtra, v))
}

// ExtraContainsFold applies the ContainsFold predicate on the "extra" field.
func ExtraContainsFold(v string) predicate.Session {
	return predicate.Session(sql.FieldContainsFold(FieldExtra, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Session) predicate.Session {
	return predicate.Session(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Session) predicate.Session {
	return predicate.Session(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Session) predicate.Session {
	return predicate.Session(sql.NotPredicates(p))
}
