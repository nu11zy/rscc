// Code generated by ent, DO NOT EDIT.

package session

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the session type in the database.
	Label = "session"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldAgentID holds the string denoting the agent_id field in the database.
	FieldAgentID = "agent_id"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldHostname holds the string denoting the hostname field in the database.
	FieldHostname = "hostname"
	// FieldDomain holds the string denoting the domain field in the database.
	FieldDomain = "domain"
	// FieldIsPriv holds the string denoting the is_priv field in the database.
	FieldIsPriv = "is_priv"
	// FieldIps holds the string denoting the ips field in the database.
	FieldIps = "ips"
	// FieldOsMeta holds the string denoting the os_meta field in the database.
	FieldOsMeta = "os_meta"
	// FieldProcName holds the string denoting the proc_name field in the database.
	FieldProcName = "proc_name"
	// FieldExtra holds the string denoting the extra field in the database.
	FieldExtra = "extra"
	// Table holds the table name of the session in the database.
	Table = "sessions"
)

// Columns holds all SQL columns for session fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldAgentID,
	FieldUsername,
	FieldHostname,
	FieldDomain,
	FieldIsPriv,
	FieldIps,
	FieldOsMeta,
	FieldProcName,
	FieldExtra,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// AgentIDValidator is a validator for the "agent_id" field. It is called by the builders before save.
	AgentIDValidator func(string) error
	// UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	UsernameValidator func(string) error
	// HostnameValidator is a validator for the "hostname" field. It is called by the builders before save.
	HostnameValidator func(string) error
	// DefaultDomain holds the default value on creation for the "domain" field.
	DefaultDomain string
	// DefaultIsPriv holds the default value on creation for the "is_priv" field.
	DefaultIsPriv bool
	// DefaultOsMeta holds the default value on creation for the "os_meta" field.
	DefaultOsMeta string
	// DefaultProcName holds the default value on creation for the "proc_name" field.
	DefaultProcName string
	// DefaultExtra holds the default value on creation for the "extra" field.
	DefaultExtra string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the Session queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByAgentID orders the results by the agent_id field.
func ByAgentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAgentID, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByHostname orders the results by the hostname field.
func ByHostname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHostname, opts...).ToFunc()
}

// ByDomain orders the results by the domain field.
func ByDomain(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDomain, opts...).ToFunc()
}

// ByIsPriv orders the results by the is_priv field.
func ByIsPriv(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsPriv, opts...).ToFunc()
}

// ByOsMeta orders the results by the os_meta field.
func ByOsMeta(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOsMeta, opts...).ToFunc()
}

// ByProcName orders the results by the proc_name field.
func ByProcName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcName, opts...).ToFunc()
}

// ByExtra orders the results by the extra field.
func ByExtra(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExtra, opts...).ToFunc()
}
