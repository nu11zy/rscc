// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"rscc/internal/database/ent/listener"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Listener is the model entity for the Listener schema.
type Listener struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// PrivateKey holds the value of the "private_key" field.
	PrivateKey   []byte `json:"private_key,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Listener) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case listener.FieldPrivateKey:
			values[i] = new([]byte)
		case listener.FieldID, listener.FieldName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Listener fields.
func (l *Listener) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case listener.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				l.ID = value.String
			}
		case listener.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				l.Name = value.String
			}
		case listener.FieldPrivateKey:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field private_key", values[i])
			} else if value != nil {
				l.PrivateKey = *value
			}
		default:
			l.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Listener.
// This includes values selected through modifiers, order, etc.
func (l *Listener) Value(name string) (ent.Value, error) {
	return l.selectValues.Get(name)
}

// Update returns a builder for updating this Listener.
// Note that you need to call Listener.Unwrap() before calling this method if this Listener
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Listener) Update() *ListenerUpdateOne {
	return NewListenerClient(l.config).UpdateOne(l)
}

// Unwrap unwraps the Listener entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *Listener) Unwrap() *Listener {
	_tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: Listener is not a transactional entity")
	}
	l.config.driver = _tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Listener) String() string {
	var builder strings.Builder
	builder.WriteString("Listener(")
	builder.WriteString(fmt.Sprintf("id=%v, ", l.ID))
	builder.WriteString("name=")
	builder.WriteString(l.Name)
	builder.WriteString(", ")
	builder.WriteString("private_key=")
	builder.WriteString(fmt.Sprintf("%v", l.PrivateKey))
	builder.WriteByte(')')
	return builder.String()
}

// Listeners is a parsable slice of Listener.
type Listeners []*Listener
