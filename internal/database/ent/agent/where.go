// Code generated by ent, DO NOT EDIT.

package agent

import (
	"rscc/internal/database/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Agent {
	return predicate.Agent(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Agent {
	return predicate.Agent(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldCreatedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldName, v))
}

// Comment applies equality check predicate on the "comment" field. It's identical to CommentEQ.
func Comment(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldComment, v))
}

// Os applies equality check predicate on the "os" field. It's identical to OsEQ.
func Os(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldOs, v))
}

// Arch applies equality check predicate on the "arch" field. It's identical to ArchEQ.
func Arch(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldArch, v))
}

// Shared applies equality check predicate on the "shared" field. It's identical to SharedEQ.
func Shared(v bool) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldShared, v))
}

// Pie applies equality check predicate on the "pie" field. It's identical to PieEQ.
func Pie(v bool) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldPie, v))
}

// Garble applies equality check predicate on the "garble" field. It's identical to GarbleEQ.
func Garble(v bool) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldGarble, v))
}

// Xxhash applies equality check predicate on the "xxhash" field. It's identical to XxhashEQ.
func Xxhash(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldXxhash, v))
}

// Path applies equality check predicate on the "path" field. It's identical to PathEQ.
func Path(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldPath, v))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldURL, v))
}

// Callbacks applies equality check predicate on the "callbacks" field. It's identical to CallbacksEQ.
func Callbacks(v int) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldCallbacks, v))
}

// Downloads applies equality check predicate on the "downloads" field. It's identical to DownloadsEQ.
func Downloads(v int) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldDownloads, v))
}

// PublicKey applies equality check predicate on the "public_key" field. It's identical to PublicKeyEQ.
func PublicKey(v []byte) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldPublicKey, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldCreatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContainsFold(FieldName, v))
}

// CommentEQ applies the EQ predicate on the "comment" field.
func CommentEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldComment, v))
}

// CommentNEQ applies the NEQ predicate on the "comment" field.
func CommentNEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldComment, v))
}

// CommentIn applies the In predicate on the "comment" field.
func CommentIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldComment, vs...))
}

// CommentNotIn applies the NotIn predicate on the "comment" field.
func CommentNotIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldComment, vs...))
}

// CommentGT applies the GT predicate on the "comment" field.
func CommentGT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldComment, v))
}

// CommentGTE applies the GTE predicate on the "comment" field.
func CommentGTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldComment, v))
}

// CommentLT applies the LT predicate on the "comment" field.
func CommentLT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldComment, v))
}

// CommentLTE applies the LTE predicate on the "comment" field.
func CommentLTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldComment, v))
}

// CommentContains applies the Contains predicate on the "comment" field.
func CommentContains(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContains(FieldComment, v))
}

// CommentHasPrefix applies the HasPrefix predicate on the "comment" field.
func CommentHasPrefix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasPrefix(FieldComment, v))
}

// CommentHasSuffix applies the HasSuffix predicate on the "comment" field.
func CommentHasSuffix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasSuffix(FieldComment, v))
}

// CommentIsNil applies the IsNil predicate on the "comment" field.
func CommentIsNil() predicate.Agent {
	return predicate.Agent(sql.FieldIsNull(FieldComment))
}

// CommentNotNil applies the NotNil predicate on the "comment" field.
func CommentNotNil() predicate.Agent {
	return predicate.Agent(sql.FieldNotNull(FieldComment))
}

// CommentEqualFold applies the EqualFold predicate on the "comment" field.
func CommentEqualFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEqualFold(FieldComment, v))
}

// CommentContainsFold applies the ContainsFold predicate on the "comment" field.
func CommentContainsFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContainsFold(FieldComment, v))
}

// OsEQ applies the EQ predicate on the "os" field.
func OsEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldOs, v))
}

// OsNEQ applies the NEQ predicate on the "os" field.
func OsNEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldOs, v))
}

// OsIn applies the In predicate on the "os" field.
func OsIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldOs, vs...))
}

// OsNotIn applies the NotIn predicate on the "os" field.
func OsNotIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldOs, vs...))
}

// OsGT applies the GT predicate on the "os" field.
func OsGT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldOs, v))
}

// OsGTE applies the GTE predicate on the "os" field.
func OsGTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldOs, v))
}

// OsLT applies the LT predicate on the "os" field.
func OsLT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldOs, v))
}

// OsLTE applies the LTE predicate on the "os" field.
func OsLTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldOs, v))
}

// OsContains applies the Contains predicate on the "os" field.
func OsContains(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContains(FieldOs, v))
}

// OsHasPrefix applies the HasPrefix predicate on the "os" field.
func OsHasPrefix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasPrefix(FieldOs, v))
}

// OsHasSuffix applies the HasSuffix predicate on the "os" field.
func OsHasSuffix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasSuffix(FieldOs, v))
}

// OsEqualFold applies the EqualFold predicate on the "os" field.
func OsEqualFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEqualFold(FieldOs, v))
}

// OsContainsFold applies the ContainsFold predicate on the "os" field.
func OsContainsFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContainsFold(FieldOs, v))
}

// ArchEQ applies the EQ predicate on the "arch" field.
func ArchEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldArch, v))
}

// ArchNEQ applies the NEQ predicate on the "arch" field.
func ArchNEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldArch, v))
}

// ArchIn applies the In predicate on the "arch" field.
func ArchIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldArch, vs...))
}

// ArchNotIn applies the NotIn predicate on the "arch" field.
func ArchNotIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldArch, vs...))
}

// ArchGT applies the GT predicate on the "arch" field.
func ArchGT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldArch, v))
}

// ArchGTE applies the GTE predicate on the "arch" field.
func ArchGTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldArch, v))
}

// ArchLT applies the LT predicate on the "arch" field.
func ArchLT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldArch, v))
}

// ArchLTE applies the LTE predicate on the "arch" field.
func ArchLTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldArch, v))
}

// ArchContains applies the Contains predicate on the "arch" field.
func ArchContains(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContains(FieldArch, v))
}

// ArchHasPrefix applies the HasPrefix predicate on the "arch" field.
func ArchHasPrefix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasPrefix(FieldArch, v))
}

// ArchHasSuffix applies the HasSuffix predicate on the "arch" field.
func ArchHasSuffix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasSuffix(FieldArch, v))
}

// ArchEqualFold applies the EqualFold predicate on the "arch" field.
func ArchEqualFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEqualFold(FieldArch, v))
}

// ArchContainsFold applies the ContainsFold predicate on the "arch" field.
func ArchContainsFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContainsFold(FieldArch, v))
}

// SharedEQ applies the EQ predicate on the "shared" field.
func SharedEQ(v bool) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldShared, v))
}

// SharedNEQ applies the NEQ predicate on the "shared" field.
func SharedNEQ(v bool) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldShared, v))
}

// PieEQ applies the EQ predicate on the "pie" field.
func PieEQ(v bool) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldPie, v))
}

// PieNEQ applies the NEQ predicate on the "pie" field.
func PieNEQ(v bool) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldPie, v))
}

// GarbleEQ applies the EQ predicate on the "garble" field.
func GarbleEQ(v bool) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldGarble, v))
}

// GarbleNEQ applies the NEQ predicate on the "garble" field.
func GarbleNEQ(v bool) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldGarble, v))
}

// XxhashEQ applies the EQ predicate on the "xxhash" field.
func XxhashEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldXxhash, v))
}

// XxhashNEQ applies the NEQ predicate on the "xxhash" field.
func XxhashNEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldXxhash, v))
}

// XxhashIn applies the In predicate on the "xxhash" field.
func XxhashIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldXxhash, vs...))
}

// XxhashNotIn applies the NotIn predicate on the "xxhash" field.
func XxhashNotIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldXxhash, vs...))
}

// XxhashGT applies the GT predicate on the "xxhash" field.
func XxhashGT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldXxhash, v))
}

// XxhashGTE applies the GTE predicate on the "xxhash" field.
func XxhashGTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldXxhash, v))
}

// XxhashLT applies the LT predicate on the "xxhash" field.
func XxhashLT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldXxhash, v))
}

// XxhashLTE applies the LTE predicate on the "xxhash" field.
func XxhashLTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldXxhash, v))
}

// XxhashContains applies the Contains predicate on the "xxhash" field.
func XxhashContains(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContains(FieldXxhash, v))
}

// XxhashHasPrefix applies the HasPrefix predicate on the "xxhash" field.
func XxhashHasPrefix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasPrefix(FieldXxhash, v))
}

// XxhashHasSuffix applies the HasSuffix predicate on the "xxhash" field.
func XxhashHasSuffix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasSuffix(FieldXxhash, v))
}

// XxhashEqualFold applies the EqualFold predicate on the "xxhash" field.
func XxhashEqualFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEqualFold(FieldXxhash, v))
}

// XxhashContainsFold applies the ContainsFold predicate on the "xxhash" field.
func XxhashContainsFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContainsFold(FieldXxhash, v))
}

// PathEQ applies the EQ predicate on the "path" field.
func PathEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldPath, v))
}

// PathNEQ applies the NEQ predicate on the "path" field.
func PathNEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldPath, v))
}

// PathIn applies the In predicate on the "path" field.
func PathIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldPath, vs...))
}

// PathNotIn applies the NotIn predicate on the "path" field.
func PathNotIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldPath, vs...))
}

// PathGT applies the GT predicate on the "path" field.
func PathGT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldPath, v))
}

// PathGTE applies the GTE predicate on the "path" field.
func PathGTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldPath, v))
}

// PathLT applies the LT predicate on the "path" field.
func PathLT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldPath, v))
}

// PathLTE applies the LTE predicate on the "path" field.
func PathLTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldPath, v))
}

// PathContains applies the Contains predicate on the "path" field.
func PathContains(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContains(FieldPath, v))
}

// PathHasPrefix applies the HasPrefix predicate on the "path" field.
func PathHasPrefix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasPrefix(FieldPath, v))
}

// PathHasSuffix applies the HasSuffix predicate on the "path" field.
func PathHasSuffix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasSuffix(FieldPath, v))
}

// PathEqualFold applies the EqualFold predicate on the "path" field.
func PathEqualFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEqualFold(FieldPath, v))
}

// PathContainsFold applies the ContainsFold predicate on the "path" field.
func PathContainsFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContainsFold(FieldPath, v))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasSuffix(FieldURL, v))
}

// URLIsNil applies the IsNil predicate on the "url" field.
func URLIsNil() predicate.Agent {
	return predicate.Agent(sql.FieldIsNull(FieldURL))
}

// URLNotNil applies the NotNil predicate on the "url" field.
func URLNotNil() predicate.Agent {
	return predicate.Agent(sql.FieldNotNull(FieldURL))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContainsFold(FieldURL, v))
}

// CallbacksEQ applies the EQ predicate on the "callbacks" field.
func CallbacksEQ(v int) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldCallbacks, v))
}

// CallbacksNEQ applies the NEQ predicate on the "callbacks" field.
func CallbacksNEQ(v int) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldCallbacks, v))
}

// CallbacksIn applies the In predicate on the "callbacks" field.
func CallbacksIn(vs ...int) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldCallbacks, vs...))
}

// CallbacksNotIn applies the NotIn predicate on the "callbacks" field.
func CallbacksNotIn(vs ...int) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldCallbacks, vs...))
}

// CallbacksGT applies the GT predicate on the "callbacks" field.
func CallbacksGT(v int) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldCallbacks, v))
}

// CallbacksGTE applies the GTE predicate on the "callbacks" field.
func CallbacksGTE(v int) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldCallbacks, v))
}

// CallbacksLT applies the LT predicate on the "callbacks" field.
func CallbacksLT(v int) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldCallbacks, v))
}

// CallbacksLTE applies the LTE predicate on the "callbacks" field.
func CallbacksLTE(v int) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldCallbacks, v))
}

// DownloadsEQ applies the EQ predicate on the "downloads" field.
func DownloadsEQ(v int) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldDownloads, v))
}

// DownloadsNEQ applies the NEQ predicate on the "downloads" field.
func DownloadsNEQ(v int) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldDownloads, v))
}

// DownloadsIn applies the In predicate on the "downloads" field.
func DownloadsIn(vs ...int) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldDownloads, vs...))
}

// DownloadsNotIn applies the NotIn predicate on the "downloads" field.
func DownloadsNotIn(vs ...int) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldDownloads, vs...))
}

// DownloadsGT applies the GT predicate on the "downloads" field.
func DownloadsGT(v int) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldDownloads, v))
}

// DownloadsGTE applies the GTE predicate on the "downloads" field.
func DownloadsGTE(v int) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldDownloads, v))
}

// DownloadsLT applies the LT predicate on the "downloads" field.
func DownloadsLT(v int) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldDownloads, v))
}

// DownloadsLTE applies the LTE predicate on the "downloads" field.
func DownloadsLTE(v int) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldDownloads, v))
}

// PublicKeyEQ applies the EQ predicate on the "public_key" field.
func PublicKeyEQ(v []byte) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldPublicKey, v))
}

// PublicKeyNEQ applies the NEQ predicate on the "public_key" field.
func PublicKeyNEQ(v []byte) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldPublicKey, v))
}

// PublicKeyIn applies the In predicate on the "public_key" field.
func PublicKeyIn(vs ...[]byte) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldPublicKey, vs...))
}

// PublicKeyNotIn applies the NotIn predicate on the "public_key" field.
func PublicKeyNotIn(vs ...[]byte) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldPublicKey, vs...))
}

// PublicKeyGT applies the GT predicate on the "public_key" field.
func PublicKeyGT(v []byte) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldPublicKey, v))
}

// PublicKeyGTE applies the GTE predicate on the "public_key" field.
func PublicKeyGTE(v []byte) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldPublicKey, v))
}

// PublicKeyLT applies the LT predicate on the "public_key" field.
func PublicKeyLT(v []byte) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldPublicKey, v))
}

// PublicKeyLTE applies the LTE predicate on the "public_key" field.
func PublicKeyLTE(v []byte) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldPublicKey, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Agent) predicate.Agent {
	return predicate.Agent(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Agent) predicate.Agent {
	return predicate.Agent(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Agent) predicate.Agent {
	return predicate.Agent(sql.NotPredicates(p))
}
