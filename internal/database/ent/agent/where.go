// Code generated by ent, DO NOT EDIT.

package agent

import (
	"rscc/internal/database/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Agent {
	return predicate.Agent(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Agent {
	return predicate.Agent(sql.FieldContainsFold(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldName, v))
}

// Os applies equality check predicate on the "os" field. It's identical to OsEQ.
func Os(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldOs, v))
}

// Arch applies equality check predicate on the "arch" field. It's identical to ArchEQ.
func Arch(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldArch, v))
}

// Addr applies equality check predicate on the "addr" field. It's identical to AddrEQ.
func Addr(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldAddr, v))
}

// PublicKey applies equality check predicate on the "public_key" field. It's identical to PublicKeyEQ.
func PublicKey(v []byte) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldPublicKey, v))
}

// Xxhash applies equality check predicate on the "xxhash" field. It's identical to XxhashEQ.
func Xxhash(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldXxhash, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContainsFold(FieldName, v))
}

// OsEQ applies the EQ predicate on the "os" field.
func OsEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldOs, v))
}

// OsNEQ applies the NEQ predicate on the "os" field.
func OsNEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldOs, v))
}

// OsIn applies the In predicate on the "os" field.
func OsIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldOs, vs...))
}

// OsNotIn applies the NotIn predicate on the "os" field.
func OsNotIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldOs, vs...))
}

// OsGT applies the GT predicate on the "os" field.
func OsGT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldOs, v))
}

// OsGTE applies the GTE predicate on the "os" field.
func OsGTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldOs, v))
}

// OsLT applies the LT predicate on the "os" field.
func OsLT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldOs, v))
}

// OsLTE applies the LTE predicate on the "os" field.
func OsLTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldOs, v))
}

// OsContains applies the Contains predicate on the "os" field.
func OsContains(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContains(FieldOs, v))
}

// OsHasPrefix applies the HasPrefix predicate on the "os" field.
func OsHasPrefix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasPrefix(FieldOs, v))
}

// OsHasSuffix applies the HasSuffix predicate on the "os" field.
func OsHasSuffix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasSuffix(FieldOs, v))
}

// OsEqualFold applies the EqualFold predicate on the "os" field.
func OsEqualFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEqualFold(FieldOs, v))
}

// OsContainsFold applies the ContainsFold predicate on the "os" field.
func OsContainsFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContainsFold(FieldOs, v))
}

// ArchEQ applies the EQ predicate on the "arch" field.
func ArchEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldArch, v))
}

// ArchNEQ applies the NEQ predicate on the "arch" field.
func ArchNEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldArch, v))
}

// ArchIn applies the In predicate on the "arch" field.
func ArchIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldArch, vs...))
}

// ArchNotIn applies the NotIn predicate on the "arch" field.
func ArchNotIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldArch, vs...))
}

// ArchGT applies the GT predicate on the "arch" field.
func ArchGT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldArch, v))
}

// ArchGTE applies the GTE predicate on the "arch" field.
func ArchGTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldArch, v))
}

// ArchLT applies the LT predicate on the "arch" field.
func ArchLT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldArch, v))
}

// ArchLTE applies the LTE predicate on the "arch" field.
func ArchLTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldArch, v))
}

// ArchContains applies the Contains predicate on the "arch" field.
func ArchContains(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContains(FieldArch, v))
}

// ArchHasPrefix applies the HasPrefix predicate on the "arch" field.
func ArchHasPrefix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasPrefix(FieldArch, v))
}

// ArchHasSuffix applies the HasSuffix predicate on the "arch" field.
func ArchHasSuffix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasSuffix(FieldArch, v))
}

// ArchEqualFold applies the EqualFold predicate on the "arch" field.
func ArchEqualFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEqualFold(FieldArch, v))
}

// ArchContainsFold applies the ContainsFold predicate on the "arch" field.
func ArchContainsFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContainsFold(FieldArch, v))
}

// AddrEQ applies the EQ predicate on the "addr" field.
func AddrEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldAddr, v))
}

// AddrNEQ applies the NEQ predicate on the "addr" field.
func AddrNEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldAddr, v))
}

// AddrIn applies the In predicate on the "addr" field.
func AddrIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldAddr, vs...))
}

// AddrNotIn applies the NotIn predicate on the "addr" field.
func AddrNotIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldAddr, vs...))
}

// AddrGT applies the GT predicate on the "addr" field.
func AddrGT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldAddr, v))
}

// AddrGTE applies the GTE predicate on the "addr" field.
func AddrGTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldAddr, v))
}

// AddrLT applies the LT predicate on the "addr" field.
func AddrLT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldAddr, v))
}

// AddrLTE applies the LTE predicate on the "addr" field.
func AddrLTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldAddr, v))
}

// AddrContains applies the Contains predicate on the "addr" field.
func AddrContains(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContains(FieldAddr, v))
}

// AddrHasPrefix applies the HasPrefix predicate on the "addr" field.
func AddrHasPrefix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasPrefix(FieldAddr, v))
}

// AddrHasSuffix applies the HasSuffix predicate on the "addr" field.
func AddrHasSuffix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasSuffix(FieldAddr, v))
}

// AddrEqualFold applies the EqualFold predicate on the "addr" field.
func AddrEqualFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEqualFold(FieldAddr, v))
}

// AddrContainsFold applies the ContainsFold predicate on the "addr" field.
func AddrContainsFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContainsFold(FieldAddr, v))
}

// PublicKeyEQ applies the EQ predicate on the "public_key" field.
func PublicKeyEQ(v []byte) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldPublicKey, v))
}

// PublicKeyNEQ applies the NEQ predicate on the "public_key" field.
func PublicKeyNEQ(v []byte) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldPublicKey, v))
}

// PublicKeyIn applies the In predicate on the "public_key" field.
func PublicKeyIn(vs ...[]byte) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldPublicKey, vs...))
}

// PublicKeyNotIn applies the NotIn predicate on the "public_key" field.
func PublicKeyNotIn(vs ...[]byte) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldPublicKey, vs...))
}

// PublicKeyGT applies the GT predicate on the "public_key" field.
func PublicKeyGT(v []byte) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldPublicKey, v))
}

// PublicKeyGTE applies the GTE predicate on the "public_key" field.
func PublicKeyGTE(v []byte) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldPublicKey, v))
}

// PublicKeyLT applies the LT predicate on the "public_key" field.
func PublicKeyLT(v []byte) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldPublicKey, v))
}

// PublicKeyLTE applies the LTE predicate on the "public_key" field.
func PublicKeyLTE(v []byte) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldPublicKey, v))
}

// XxhashEQ applies the EQ predicate on the "xxhash" field.
func XxhashEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldXxhash, v))
}

// XxhashNEQ applies the NEQ predicate on the "xxhash" field.
func XxhashNEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldXxhash, v))
}

// XxhashIn applies the In predicate on the "xxhash" field.
func XxhashIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldXxhash, vs...))
}

// XxhashNotIn applies the NotIn predicate on the "xxhash" field.
func XxhashNotIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldXxhash, vs...))
}

// XxhashGT applies the GT predicate on the "xxhash" field.
func XxhashGT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldXxhash, v))
}

// XxhashGTE applies the GTE predicate on the "xxhash" field.
func XxhashGTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldXxhash, v))
}

// XxhashLT applies the LT predicate on the "xxhash" field.
func XxhashLT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldXxhash, v))
}

// XxhashLTE applies the LTE predicate on the "xxhash" field.
func XxhashLTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldXxhash, v))
}

// XxhashContains applies the Contains predicate on the "xxhash" field.
func XxhashContains(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContains(FieldXxhash, v))
}

// XxhashHasPrefix applies the HasPrefix predicate on the "xxhash" field.
func XxhashHasPrefix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasPrefix(FieldXxhash, v))
}

// XxhashHasSuffix applies the HasSuffix predicate on the "xxhash" field.
func XxhashHasSuffix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasSuffix(FieldXxhash, v))
}

// XxhashEqualFold applies the EqualFold predicate on the "xxhash" field.
func XxhashEqualFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEqualFold(FieldXxhash, v))
}

// XxhashContainsFold applies the ContainsFold predicate on the "xxhash" field.
func XxhashContainsFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContainsFold(FieldXxhash, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Agent) predicate.Agent {
	return predicate.Agent(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Agent) predicate.Agent {
	return predicate.Agent(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Agent) predicate.Agent {
	return predicate.Agent(sql.NotPredicates(p))
}
