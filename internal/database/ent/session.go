// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"rscc/internal/database/ent/session"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Session is the model entity for the Session schema.
type Session struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// AgentID holds the value of the "agent_id" field.
	AgentID string `json:"agent_id,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Hostname holds the value of the "hostname" field.
	Hostname string `json:"hostname,omitempty"`
	// Domain holds the value of the "domain" field.
	Domain string `json:"domain,omitempty"`
	// IsPriv holds the value of the "is_priv" field.
	IsPriv bool `json:"is_priv,omitempty"`
	// Ips holds the value of the "ips" field.
	Ips []string `json:"ips,omitempty"`
	// OsMeta holds the value of the "os_meta" field.
	OsMeta string `json:"os_meta,omitempty"`
	// ProcName holds the value of the "proc_name" field.
	ProcName string `json:"proc_name,omitempty"`
	// Extra holds the value of the "extra" field.
	Extra        string `json:"extra,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Session) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case session.FieldIps:
			values[i] = new([]byte)
		case session.FieldIsPriv:
			values[i] = new(sql.NullBool)
		case session.FieldID, session.FieldAgentID, session.FieldUsername, session.FieldHostname, session.FieldDomain, session.FieldOsMeta, session.FieldProcName, session.FieldExtra:
			values[i] = new(sql.NullString)
		case session.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Session fields.
func (s *Session) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case session.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				s.ID = value.String
			}
		case session.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case session.FieldAgentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field agent_id", values[i])
			} else if value.Valid {
				s.AgentID = value.String
			}
		case session.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				s.Username = value.String
			}
		case session.FieldHostname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hostname", values[i])
			} else if value.Valid {
				s.Hostname = value.String
			}
		case session.FieldDomain:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field domain", values[i])
			} else if value.Valid {
				s.Domain = value.String
			}
		case session.FieldIsPriv:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_priv", values[i])
			} else if value.Valid {
				s.IsPriv = value.Bool
			}
		case session.FieldIps:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field ips", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.Ips); err != nil {
					return fmt.Errorf("unmarshal field ips: %w", err)
				}
			}
		case session.FieldOsMeta:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field os_meta", values[i])
			} else if value.Valid {
				s.OsMeta = value.String
			}
		case session.FieldProcName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field proc_name", values[i])
			} else if value.Valid {
				s.ProcName = value.String
			}
		case session.FieldExtra:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field extra", values[i])
			} else if value.Valid {
				s.Extra = value.String
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Session.
// This includes values selected through modifiers, order, etc.
func (s *Session) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// Update returns a builder for updating this Session.
// Note that you need to call Session.Unwrap() before calling this method if this Session
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Session) Update() *SessionUpdateOne {
	return NewSessionClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Session entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Session) Unwrap() *Session {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Session is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Session) String() string {
	var builder strings.Builder
	builder.WriteString("Session(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("agent_id=")
	builder.WriteString(s.AgentID)
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(s.Username)
	builder.WriteString(", ")
	builder.WriteString("hostname=")
	builder.WriteString(s.Hostname)
	builder.WriteString(", ")
	builder.WriteString("domain=")
	builder.WriteString(s.Domain)
	builder.WriteString(", ")
	builder.WriteString("is_priv=")
	builder.WriteString(fmt.Sprintf("%v", s.IsPriv))
	builder.WriteString(", ")
	builder.WriteString("ips=")
	builder.WriteString(fmt.Sprintf("%v", s.Ips))
	builder.WriteString(", ")
	builder.WriteString("os_meta=")
	builder.WriteString(s.OsMeta)
	builder.WriteString(", ")
	builder.WriteString("proc_name=")
	builder.WriteString(s.ProcName)
	builder.WriteString(", ")
	builder.WriteString("extra=")
	builder.WriteString(s.Extra)
	builder.WriteByte(')')
	return builder.String()
}

// Sessions is a parsable slice of Session.
type Sessions []*Session
