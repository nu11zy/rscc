// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"rscc/internal/database/ent/operator"
	"rscc/internal/database/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OperatorUpdate is the builder for updating Operator entities.
type OperatorUpdate struct {
	config
	hooks    []Hook
	mutation *OperatorMutation
}

// Where appends a list predicates to the OperatorUpdate builder.
func (ou *OperatorUpdate) Where(ps ...predicate.Operator) *OperatorUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetName sets the "name" field.
func (ou *OperatorUpdate) SetName(s string) *OperatorUpdate {
	ou.mutation.SetName(s)
	return ou
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ou *OperatorUpdate) SetNillableName(s *string) *OperatorUpdate {
	if s != nil {
		ou.SetName(*s)
	}
	return ou
}

// SetLastLogin sets the "last_login" field.
func (ou *OperatorUpdate) SetLastLogin(t time.Time) *OperatorUpdate {
	ou.mutation.SetLastLogin(t)
	return ou
}

// SetNillableLastLogin sets the "last_login" field if the given value is not nil.
func (ou *OperatorUpdate) SetNillableLastLogin(t *time.Time) *OperatorUpdate {
	if t != nil {
		ou.SetLastLogin(*t)
	}
	return ou
}

// ClearLastLogin clears the value of the "last_login" field.
func (ou *OperatorUpdate) ClearLastLogin() *OperatorUpdate {
	ou.mutation.ClearLastLogin()
	return ou
}

// SetPublicKey sets the "public_key" field.
func (ou *OperatorUpdate) SetPublicKey(s string) *OperatorUpdate {
	ou.mutation.SetPublicKey(s)
	return ou
}

// SetNillablePublicKey sets the "public_key" field if the given value is not nil.
func (ou *OperatorUpdate) SetNillablePublicKey(s *string) *OperatorUpdate {
	if s != nil {
		ou.SetPublicKey(*s)
	}
	return ou
}

// SetIsAdmin sets the "is_admin" field.
func (ou *OperatorUpdate) SetIsAdmin(b bool) *OperatorUpdate {
	ou.mutation.SetIsAdmin(b)
	return ou
}

// SetNillableIsAdmin sets the "is_admin" field if the given value is not nil.
func (ou *OperatorUpdate) SetNillableIsAdmin(b *bool) *OperatorUpdate {
	if b != nil {
		ou.SetIsAdmin(*b)
	}
	return ou
}

// Mutation returns the OperatorMutation object of the builder.
func (ou *OperatorUpdate) Mutation() *OperatorMutation {
	return ou.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OperatorUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OperatorUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OperatorUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OperatorUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ou *OperatorUpdate) check() error {
	if v, ok := ou.mutation.Name(); ok {
		if err := operator.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Operator.name": %w`, err)}
		}
	}
	if v, ok := ou.mutation.PublicKey(); ok {
		if err := operator.PublicKeyValidator(v); err != nil {
			return &ValidationError{Name: "public_key", err: fmt.Errorf(`ent: validator failed for field "Operator.public_key": %w`, err)}
		}
	}
	return nil
}

func (ou *OperatorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(operator.Table, operator.Columns, sqlgraph.NewFieldSpec(operator.FieldID, field.TypeString))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.Name(); ok {
		_spec.SetField(operator.FieldName, field.TypeString, value)
	}
	if value, ok := ou.mutation.LastLogin(); ok {
		_spec.SetField(operator.FieldLastLogin, field.TypeTime, value)
	}
	if ou.mutation.LastLoginCleared() {
		_spec.ClearField(operator.FieldLastLogin, field.TypeTime)
	}
	if value, ok := ou.mutation.PublicKey(); ok {
		_spec.SetField(operator.FieldPublicKey, field.TypeString, value)
	}
	if value, ok := ou.mutation.IsAdmin(); ok {
		_spec.SetField(operator.FieldIsAdmin, field.TypeBool, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{operator.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OperatorUpdateOne is the builder for updating a single Operator entity.
type OperatorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OperatorMutation
}

// SetName sets the "name" field.
func (ouo *OperatorUpdateOne) SetName(s string) *OperatorUpdateOne {
	ouo.mutation.SetName(s)
	return ouo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ouo *OperatorUpdateOne) SetNillableName(s *string) *OperatorUpdateOne {
	if s != nil {
		ouo.SetName(*s)
	}
	return ouo
}

// SetLastLogin sets the "last_login" field.
func (ouo *OperatorUpdateOne) SetLastLogin(t time.Time) *OperatorUpdateOne {
	ouo.mutation.SetLastLogin(t)
	return ouo
}

// SetNillableLastLogin sets the "last_login" field if the given value is not nil.
func (ouo *OperatorUpdateOne) SetNillableLastLogin(t *time.Time) *OperatorUpdateOne {
	if t != nil {
		ouo.SetLastLogin(*t)
	}
	return ouo
}

// ClearLastLogin clears the value of the "last_login" field.
func (ouo *OperatorUpdateOne) ClearLastLogin() *OperatorUpdateOne {
	ouo.mutation.ClearLastLogin()
	return ouo
}

// SetPublicKey sets the "public_key" field.
func (ouo *OperatorUpdateOne) SetPublicKey(s string) *OperatorUpdateOne {
	ouo.mutation.SetPublicKey(s)
	return ouo
}

// SetNillablePublicKey sets the "public_key" field if the given value is not nil.
func (ouo *OperatorUpdateOne) SetNillablePublicKey(s *string) *OperatorUpdateOne {
	if s != nil {
		ouo.SetPublicKey(*s)
	}
	return ouo
}

// SetIsAdmin sets the "is_admin" field.
func (ouo *OperatorUpdateOne) SetIsAdmin(b bool) *OperatorUpdateOne {
	ouo.mutation.SetIsAdmin(b)
	return ouo
}

// SetNillableIsAdmin sets the "is_admin" field if the given value is not nil.
func (ouo *OperatorUpdateOne) SetNillableIsAdmin(b *bool) *OperatorUpdateOne {
	if b != nil {
		ouo.SetIsAdmin(*b)
	}
	return ouo
}

// Mutation returns the OperatorMutation object of the builder.
func (ouo *OperatorUpdateOne) Mutation() *OperatorMutation {
	return ouo.mutation
}

// Where appends a list predicates to the OperatorUpdate builder.
func (ouo *OperatorUpdateOne) Where(ps ...predicate.Operator) *OperatorUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OperatorUpdateOne) Select(field string, fields ...string) *OperatorUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Operator entity.
func (ouo *OperatorUpdateOne) Save(ctx context.Context) (*Operator, error) {
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OperatorUpdateOne) SaveX(ctx context.Context) *Operator {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OperatorUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OperatorUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouo *OperatorUpdateOne) check() error {
	if v, ok := ouo.mutation.Name(); ok {
		if err := operator.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Operator.name": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.PublicKey(); ok {
		if err := operator.PublicKeyValidator(v); err != nil {
			return &ValidationError{Name: "public_key", err: fmt.Errorf(`ent: validator failed for field "Operator.public_key": %w`, err)}
		}
	}
	return nil
}

func (ouo *OperatorUpdateOne) sqlSave(ctx context.Context) (_node *Operator, err error) {
	if err := ouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(operator.Table, operator.Columns, sqlgraph.NewFieldSpec(operator.FieldID, field.TypeString))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Operator.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, operator.FieldID)
		for _, f := range fields {
			if !operator.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != operator.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.Name(); ok {
		_spec.SetField(operator.FieldName, field.TypeString, value)
	}
	if value, ok := ouo.mutation.LastLogin(); ok {
		_spec.SetField(operator.FieldLastLogin, field.TypeTime, value)
	}
	if ouo.mutation.LastLoginCleared() {
		_spec.ClearField(operator.FieldLastLogin, field.TypeTime)
	}
	if value, ok := ouo.mutation.PublicKey(); ok {
		_spec.SetField(operator.FieldPublicKey, field.TypeString, value)
	}
	if value, ok := ouo.mutation.IsAdmin(); ok {
		_spec.SetField(operator.FieldIsAdmin, field.TypeBool, value)
	}
	_node = &Operator{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{operator.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
