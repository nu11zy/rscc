// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"rscc/internal/database/ent/agent"
	"rscc/internal/database/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AgentUpdate is the builder for updating Agent entities.
type AgentUpdate struct {
	config
	hooks    []Hook
	mutation *AgentMutation
}

// Where appends a list predicates to the AgentUpdate builder.
func (au *AgentUpdate) Where(ps ...predicate.Agent) *AgentUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetComment sets the "comment" field.
func (au *AgentUpdate) SetComment(s string) *AgentUpdate {
	au.mutation.SetComment(s)
	return au
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (au *AgentUpdate) SetNillableComment(s *string) *AgentUpdate {
	if s != nil {
		au.SetComment(*s)
	}
	return au
}

// ClearComment clears the value of the "comment" field.
func (au *AgentUpdate) ClearComment() *AgentUpdate {
	au.mutation.ClearComment()
	return au
}

// SetURL sets the "url" field.
func (au *AgentUpdate) SetURL(s string) *AgentUpdate {
	au.mutation.SetURL(s)
	return au
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (au *AgentUpdate) SetNillableURL(s *string) *AgentUpdate {
	if s != nil {
		au.SetURL(*s)
	}
	return au
}

// ClearURL clears the value of the "url" field.
func (au *AgentUpdate) ClearURL() *AgentUpdate {
	au.mutation.ClearURL()
	return au
}

// SetHosted sets the "hosted" field.
func (au *AgentUpdate) SetHosted(b bool) *AgentUpdate {
	au.mutation.SetHosted(b)
	return au
}

// SetNillableHosted sets the "hosted" field if the given value is not nil.
func (au *AgentUpdate) SetNillableHosted(b *bool) *AgentUpdate {
	if b != nil {
		au.SetHosted(*b)
	}
	return au
}

// SetCallbacks sets the "callbacks" field.
func (au *AgentUpdate) SetCallbacks(i int) *AgentUpdate {
	au.mutation.ResetCallbacks()
	au.mutation.SetCallbacks(i)
	return au
}

// SetNillableCallbacks sets the "callbacks" field if the given value is not nil.
func (au *AgentUpdate) SetNillableCallbacks(i *int) *AgentUpdate {
	if i != nil {
		au.SetCallbacks(*i)
	}
	return au
}

// AddCallbacks adds i to the "callbacks" field.
func (au *AgentUpdate) AddCallbacks(i int) *AgentUpdate {
	au.mutation.AddCallbacks(i)
	return au
}

// SetDownloads sets the "downloads" field.
func (au *AgentUpdate) SetDownloads(i int) *AgentUpdate {
	au.mutation.ResetDownloads()
	au.mutation.SetDownloads(i)
	return au
}

// SetNillableDownloads sets the "downloads" field if the given value is not nil.
func (au *AgentUpdate) SetNillableDownloads(i *int) *AgentUpdate {
	if i != nil {
		au.SetDownloads(*i)
	}
	return au
}

// AddDownloads adds i to the "downloads" field.
func (au *AgentUpdate) AddDownloads(i int) *AgentUpdate {
	au.mutation.AddDownloads(i)
	return au
}

// Mutation returns the AgentMutation object of the builder.
func (au *AgentUpdate) Mutation() *AgentMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AgentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AgentUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AgentUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AgentUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *AgentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(agent.Table, agent.Columns, sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Comment(); ok {
		_spec.SetField(agent.FieldComment, field.TypeString, value)
	}
	if au.mutation.CommentCleared() {
		_spec.ClearField(agent.FieldComment, field.TypeString)
	}
	if value, ok := au.mutation.URL(); ok {
		_spec.SetField(agent.FieldURL, field.TypeString, value)
	}
	if au.mutation.URLCleared() {
		_spec.ClearField(agent.FieldURL, field.TypeString)
	}
	if value, ok := au.mutation.Hosted(); ok {
		_spec.SetField(agent.FieldHosted, field.TypeBool, value)
	}
	if value, ok := au.mutation.Callbacks(); ok {
		_spec.SetField(agent.FieldCallbacks, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedCallbacks(); ok {
		_spec.AddField(agent.FieldCallbacks, field.TypeInt, value)
	}
	if value, ok := au.mutation.Downloads(); ok {
		_spec.SetField(agent.FieldDownloads, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedDownloads(); ok {
		_spec.AddField(agent.FieldDownloads, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{agent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AgentUpdateOne is the builder for updating a single Agent entity.
type AgentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AgentMutation
}

// SetComment sets the "comment" field.
func (auo *AgentUpdateOne) SetComment(s string) *AgentUpdateOne {
	auo.mutation.SetComment(s)
	return auo
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableComment(s *string) *AgentUpdateOne {
	if s != nil {
		auo.SetComment(*s)
	}
	return auo
}

// ClearComment clears the value of the "comment" field.
func (auo *AgentUpdateOne) ClearComment() *AgentUpdateOne {
	auo.mutation.ClearComment()
	return auo
}

// SetURL sets the "url" field.
func (auo *AgentUpdateOne) SetURL(s string) *AgentUpdateOne {
	auo.mutation.SetURL(s)
	return auo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableURL(s *string) *AgentUpdateOne {
	if s != nil {
		auo.SetURL(*s)
	}
	return auo
}

// ClearURL clears the value of the "url" field.
func (auo *AgentUpdateOne) ClearURL() *AgentUpdateOne {
	auo.mutation.ClearURL()
	return auo
}

// SetHosted sets the "hosted" field.
func (auo *AgentUpdateOne) SetHosted(b bool) *AgentUpdateOne {
	auo.mutation.SetHosted(b)
	return auo
}

// SetNillableHosted sets the "hosted" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableHosted(b *bool) *AgentUpdateOne {
	if b != nil {
		auo.SetHosted(*b)
	}
	return auo
}

// SetCallbacks sets the "callbacks" field.
func (auo *AgentUpdateOne) SetCallbacks(i int) *AgentUpdateOne {
	auo.mutation.ResetCallbacks()
	auo.mutation.SetCallbacks(i)
	return auo
}

// SetNillableCallbacks sets the "callbacks" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableCallbacks(i *int) *AgentUpdateOne {
	if i != nil {
		auo.SetCallbacks(*i)
	}
	return auo
}

// AddCallbacks adds i to the "callbacks" field.
func (auo *AgentUpdateOne) AddCallbacks(i int) *AgentUpdateOne {
	auo.mutation.AddCallbacks(i)
	return auo
}

// SetDownloads sets the "downloads" field.
func (auo *AgentUpdateOne) SetDownloads(i int) *AgentUpdateOne {
	auo.mutation.ResetDownloads()
	auo.mutation.SetDownloads(i)
	return auo
}

// SetNillableDownloads sets the "downloads" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableDownloads(i *int) *AgentUpdateOne {
	if i != nil {
		auo.SetDownloads(*i)
	}
	return auo
}

// AddDownloads adds i to the "downloads" field.
func (auo *AgentUpdateOne) AddDownloads(i int) *AgentUpdateOne {
	auo.mutation.AddDownloads(i)
	return auo
}

// Mutation returns the AgentMutation object of the builder.
func (auo *AgentUpdateOne) Mutation() *AgentMutation {
	return auo.mutation
}

// Where appends a list predicates to the AgentUpdate builder.
func (auo *AgentUpdateOne) Where(ps ...predicate.Agent) *AgentUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AgentUpdateOne) Select(field string, fields ...string) *AgentUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Agent entity.
func (auo *AgentUpdateOne) Save(ctx context.Context) (*Agent, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AgentUpdateOne) SaveX(ctx context.Context) *Agent {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AgentUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AgentUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *AgentUpdateOne) sqlSave(ctx context.Context) (_node *Agent, err error) {
	_spec := sqlgraph.NewUpdateSpec(agent.Table, agent.Columns, sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Agent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, agent.FieldID)
		for _, f := range fields {
			if !agent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != agent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Comment(); ok {
		_spec.SetField(agent.FieldComment, field.TypeString, value)
	}
	if auo.mutation.CommentCleared() {
		_spec.ClearField(agent.FieldComment, field.TypeString)
	}
	if value, ok := auo.mutation.URL(); ok {
		_spec.SetField(agent.FieldURL, field.TypeString, value)
	}
	if auo.mutation.URLCleared() {
		_spec.ClearField(agent.FieldURL, field.TypeString)
	}
	if value, ok := auo.mutation.Hosted(); ok {
		_spec.SetField(agent.FieldHosted, field.TypeBool, value)
	}
	if value, ok := auo.mutation.Callbacks(); ok {
		_spec.SetField(agent.FieldCallbacks, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedCallbacks(); ok {
		_spec.AddField(agent.FieldCallbacks, field.TypeInt, value)
	}
	if value, ok := auo.mutation.Downloads(); ok {
		_spec.SetField(agent.FieldDownloads, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedDownloads(); ok {
		_spec.AddField(agent.FieldDownloads, field.TypeInt, value)
	}
	_node = &Agent{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{agent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
