// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"rscc/internal/database/ent/agent"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AgentCreate is the builder for creating a Agent entity.
type AgentCreate struct {
	config
	mutation *AgentMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (ac *AgentCreate) SetName(s string) *AgentCreate {
	ac.mutation.SetName(s)
	return ac
}

// SetOs sets the "os" field.
func (ac *AgentCreate) SetOs(s string) *AgentCreate {
	ac.mutation.SetOs(s)
	return ac
}

// SetArch sets the "arch" field.
func (ac *AgentCreate) SetArch(s string) *AgentCreate {
	ac.mutation.SetArch(s)
	return ac
}

// SetAddr sets the "addr" field.
func (ac *AgentCreate) SetAddr(s string) *AgentCreate {
	ac.mutation.SetAddr(s)
	return ac
}

// SetPublicKey sets the "public_key" field.
func (ac *AgentCreate) SetPublicKey(b []byte) *AgentCreate {
	ac.mutation.SetPublicKey(b)
	return ac
}

// SetXxhash sets the "xxhash" field.
func (ac *AgentCreate) SetXxhash(u uint64) *AgentCreate {
	ac.mutation.SetXxhash(u)
	return ac
}

// SetStatus sets the "status" field.
func (ac *AgentCreate) SetStatus(i int) *AgentCreate {
	ac.mutation.SetStatus(i)
	return ac
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ac *AgentCreate) SetNillableStatus(i *int) *AgentCreate {
	if i != nil {
		ac.SetStatus(*i)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *AgentCreate) SetID(s string) *AgentCreate {
	ac.mutation.SetID(s)
	return ac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ac *AgentCreate) SetNillableID(s *string) *AgentCreate {
	if s != nil {
		ac.SetID(*s)
	}
	return ac
}

// Mutation returns the AgentMutation object of the builder.
func (ac *AgentCreate) Mutation() *AgentMutation {
	return ac.mutation
}

// Save creates the Agent in the database.
func (ac *AgentCreate) Save(ctx context.Context) (*Agent, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AgentCreate) SaveX(ctx context.Context) *Agent {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AgentCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AgentCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AgentCreate) defaults() {
	if _, ok := ac.mutation.Status(); !ok {
		v := agent.DefaultStatus
		ac.mutation.SetStatus(v)
	}
	if _, ok := ac.mutation.ID(); !ok {
		v := agent.DefaultID()
		ac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AgentCreate) check() error {
	if _, ok := ac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Agent.name"`)}
	}
	if v, ok := ac.mutation.Name(); ok {
		if err := agent.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Agent.name": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Os(); !ok {
		return &ValidationError{Name: "os", err: errors.New(`ent: missing required field "Agent.os"`)}
	}
	if v, ok := ac.mutation.Os(); ok {
		if err := agent.OsValidator(v); err != nil {
			return &ValidationError{Name: "os", err: fmt.Errorf(`ent: validator failed for field "Agent.os": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Arch(); !ok {
		return &ValidationError{Name: "arch", err: errors.New(`ent: missing required field "Agent.arch"`)}
	}
	if v, ok := ac.mutation.Arch(); ok {
		if err := agent.ArchValidator(v); err != nil {
			return &ValidationError{Name: "arch", err: fmt.Errorf(`ent: validator failed for field "Agent.arch": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Addr(); !ok {
		return &ValidationError{Name: "addr", err: errors.New(`ent: missing required field "Agent.addr"`)}
	}
	if v, ok := ac.mutation.Addr(); ok {
		if err := agent.AddrValidator(v); err != nil {
			return &ValidationError{Name: "addr", err: fmt.Errorf(`ent: validator failed for field "Agent.addr": %w`, err)}
		}
	}
	if _, ok := ac.mutation.PublicKey(); !ok {
		return &ValidationError{Name: "public_key", err: errors.New(`ent: missing required field "Agent.public_key"`)}
	}
	if v, ok := ac.mutation.PublicKey(); ok {
		if err := agent.PublicKeyValidator(v); err != nil {
			return &ValidationError{Name: "public_key", err: fmt.Errorf(`ent: validator failed for field "Agent.public_key": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Xxhash(); !ok {
		return &ValidationError{Name: "xxhash", err: errors.New(`ent: missing required field "Agent.xxhash"`)}
	}
	if _, ok := ac.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Agent.status"`)}
	}
	return nil
}

func (ac *AgentCreate) sqlSave(ctx context.Context) (*Agent, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Agent.ID type: %T", _spec.ID.Value)
		}
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AgentCreate) createSpec() (*Agent, *sqlgraph.CreateSpec) {
	var (
		_node = &Agent{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(agent.Table, sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString))
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.Name(); ok {
		_spec.SetField(agent.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ac.mutation.Os(); ok {
		_spec.SetField(agent.FieldOs, field.TypeString, value)
		_node.Os = value
	}
	if value, ok := ac.mutation.Arch(); ok {
		_spec.SetField(agent.FieldArch, field.TypeString, value)
		_node.Arch = value
	}
	if value, ok := ac.mutation.Addr(); ok {
		_spec.SetField(agent.FieldAddr, field.TypeString, value)
		_node.Addr = value
	}
	if value, ok := ac.mutation.PublicKey(); ok {
		_spec.SetField(agent.FieldPublicKey, field.TypeBytes, value)
		_node.PublicKey = value
	}
	if value, ok := ac.mutation.Xxhash(); ok {
		_spec.SetField(agent.FieldXxhash, field.TypeUint64, value)
		_node.Xxhash = value
	}
	if value, ok := ac.mutation.Status(); ok {
		_spec.SetField(agent.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	return _node, _spec
}

// AgentCreateBulk is the builder for creating many Agent entities in bulk.
type AgentCreateBulk struct {
	config
	err      error
	builders []*AgentCreate
}

// Save creates the Agent entities in the database.
func (acb *AgentCreateBulk) Save(ctx context.Context) ([]*Agent, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Agent, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AgentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AgentCreateBulk) SaveX(ctx context.Context) []*Agent {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AgentCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AgentCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
