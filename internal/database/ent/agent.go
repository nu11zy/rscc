// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"rscc/internal/database/ent/agent"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Agent is the model entity for the Agent schema.
type Agent struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Os holds the value of the "os" field.
	Os string `json:"os,omitempty"`
	// Arch holds the value of the "arch" field.
	Arch string `json:"arch,omitempty"`
	// Server holds the value of the "server" field.
	Server string `json:"server,omitempty"`
	// Shared holds the value of the "shared" field.
	Shared bool `json:"shared,omitempty"`
	// Pie holds the value of the "pie" field.
	Pie bool `json:"pie,omitempty"`
	// Garble holds the value of the "garble" field.
	Garble bool `json:"garble,omitempty"`
	// Subsystems holds the value of the "subsystems" field.
	Subsystems []string `json:"subsystems,omitempty"`
	// PublicKey holds the value of the "public_key" field.
	PublicKey []byte `json:"public_key,omitempty"`
	// Xxhash holds the value of the "xxhash" field.
	Xxhash       string `json:"xxhash,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Agent) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case agent.FieldSubsystems, agent.FieldPublicKey:
			values[i] = new([]byte)
		case agent.FieldShared, agent.FieldPie, agent.FieldGarble:
			values[i] = new(sql.NullBool)
		case agent.FieldID, agent.FieldName, agent.FieldOs, agent.FieldArch, agent.FieldServer, agent.FieldXxhash:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Agent fields.
func (a *Agent) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case agent.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				a.ID = value.String
			}
		case agent.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				a.Name = value.String
			}
		case agent.FieldOs:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field os", values[i])
			} else if value.Valid {
				a.Os = value.String
			}
		case agent.FieldArch:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field arch", values[i])
			} else if value.Valid {
				a.Arch = value.String
			}
		case agent.FieldServer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field server", values[i])
			} else if value.Valid {
				a.Server = value.String
			}
		case agent.FieldShared:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field shared", values[i])
			} else if value.Valid {
				a.Shared = value.Bool
			}
		case agent.FieldPie:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field pie", values[i])
			} else if value.Valid {
				a.Pie = value.Bool
			}
		case agent.FieldGarble:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field garble", values[i])
			} else if value.Valid {
				a.Garble = value.Bool
			}
		case agent.FieldSubsystems:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field subsystems", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &a.Subsystems); err != nil {
					return fmt.Errorf("unmarshal field subsystems: %w", err)
				}
			}
		case agent.FieldPublicKey:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field public_key", values[i])
			} else if value != nil {
				a.PublicKey = *value
			}
		case agent.FieldXxhash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field xxhash", values[i])
			} else if value.Valid {
				a.Xxhash = value.String
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Agent.
// This includes values selected through modifiers, order, etc.
func (a *Agent) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// Update returns a builder for updating this Agent.
// Note that you need to call Agent.Unwrap() before calling this method if this Agent
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Agent) Update() *AgentUpdateOne {
	return NewAgentClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Agent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Agent) Unwrap() *Agent {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Agent is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Agent) String() string {
	var builder strings.Builder
	builder.WriteString("Agent(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("name=")
	builder.WriteString(a.Name)
	builder.WriteString(", ")
	builder.WriteString("os=")
	builder.WriteString(a.Os)
	builder.WriteString(", ")
	builder.WriteString("arch=")
	builder.WriteString(a.Arch)
	builder.WriteString(", ")
	builder.WriteString("server=")
	builder.WriteString(a.Server)
	builder.WriteString(", ")
	builder.WriteString("shared=")
	builder.WriteString(fmt.Sprintf("%v", a.Shared))
	builder.WriteString(", ")
	builder.WriteString("pie=")
	builder.WriteString(fmt.Sprintf("%v", a.Pie))
	builder.WriteString(", ")
	builder.WriteString("garble=")
	builder.WriteString(fmt.Sprintf("%v", a.Garble))
	builder.WriteString(", ")
	builder.WriteString("subsystems=")
	builder.WriteString(fmt.Sprintf("%v", a.Subsystems))
	builder.WriteString(", ")
	builder.WriteString("public_key=")
	builder.WriteString(fmt.Sprintf("%v", a.PublicKey))
	builder.WriteString(", ")
	builder.WriteString("xxhash=")
	builder.WriteString(a.Xxhash)
	builder.WriteByte(')')
	return builder.String()
}

// Agents is a parsable slice of Agent.
type Agents []*Agent
